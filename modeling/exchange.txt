Environment:
	action{[exists,noexists,cachedDelete]<->[changed,deleted]}
	policy{[changed,deleted]}

Parameters:
	version{v*}
	chksum{c*} (on demand)
	data{d*} (on demand)

action(exists<->changed):
	switch(v1,c1; v2,c2):
		case v1 != v2:
			choose max(v1, v2)
			done
		case v1 == v2; c1 == c2:
			done
		case v1 == v2; c1 != c2:
			if <chooser(d1, d2, &result)>:
				choose result
			else if c1 > c2:
				choose v1 + 1
			else:
				choose v2 + 1
			send
			done

action(noexists<->deleted):
	done

action(cachedDelete<->deleted):
	done

action(exists<->deleted):
	switch(v1, v2):
		case v2 > v1:
			choose v2
			send	#send again, because the other side does not know delete was choosen
			done
		case v1 > v2:
			choose v1
			done
		default:
			policy(changed):
				choose v1 + 1
				send
				done
			policy(deleted):
				choose v2 + 1
				send
				done

action(noexists<->changed):
	choose v2
	done
	# !!! no information is given whether locally was just deleted or never existed or was deleted long ago.
	# But this is addressed by the other side, if delete is prefered, they will resend a higher versioned delete change

action(cachedDelete<->changed): #special, happens only when deleted, but change not yet pushed
	switch(v1, v2):
		case v2 > v1:
			choose v2
			done
		case v1 > v2:
			choose v1	#no send needed, is already cached as change
			done
		default:
			policy(changed):
				choose v2 + 1
				send
				done
			policy(deleted):
				choose v1 + 1
				send
				done


