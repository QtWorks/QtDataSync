/*!
@class QtDataSync::Task

All this class does is extend QFuture by the onResult() method. This allows you to set a
function to be called as soon as the future finishes, without having to wait blocking. This
version is non generic and thus uses QVariant. If you want to use the generic version, have
a look at the toGeneric() method.

Internally, QFutureWatcher is used to do this. This class just simplyfies the process. You can
still use it like a normal QFuture.

@sa Task::onResult, Task::toGeneric, GenericTask
*/

/*!
@fn QtDataSync::Task::onResult(const std::function<void(QVariant)> &, const std::function<void(const QException &)> &)

@param onSuccess The handler to be called if the request succeeded
@param onExcept The handler to be called if an exception was thrown

As soon as the future is done, it is check whether it was successful or not. If everything
worked, the result is extracted and passed to the onSuccess handler. If something went wrong,
the exception is caught and passed on to the onExcept handler. If you don't pass an onExcept
handler, the exception will be logged, but not crash the application.

@note If you only want to catch one specific exception type, simply call QException::raise
in you handler inside a custom try-catch block. However, this means exception you do not catch
there again will crash your application.

If no parent is specified, the handler will be bound to QCoreApplication::instance(). This
means as long as the qApp exists, the handlers are called when finished. If you specify a
parent, handlers will be called only as long as this object is alive. If it's deleted before
the future has finished, the handlers will *not* be called anymore.
*/

/*!
@fn QtDataSync::Task::onResult(QObject *, const std::function<void(QVariant)> &, const std::function<void(const QException &)> &)

@param parent The parent object to bind the handlers to
@copydetails Task::onResult(const std::function<void(QVariant)> &, const std::function<void(const QException &)> &)
*/

/*!
@class QtDataSync::UpdateTask

Instead of creating a new object for the loaded data, this class will be given an existing
instance of the target object type. The result and onResult methods do not return a new object,
instead they update the existing object to the result of the task. This way pointer classes
can be easily updated, without having to exchange the references everywhere. The task is used
by AsyncDataStore::loadInto.

@sa AsyncDataStore::loadInto
*/
