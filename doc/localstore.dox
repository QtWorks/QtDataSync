/*!
@class QtDataSync::LocalStore

It is used by the datasync engine as a persistent offline data store. You should make shure
your implementation only uses offline resources, that are available any time. The default
implementation uses an SQLite database and local file storage.

If you implement the methods, you should do it synchronously. Since the datasync instance
engine, as well as this store, run on their own thread, you won't block the ui. I haven't
tested with an asynchronous store, and at least a few methods are required to be blocking.

@attention The local store is constructed on the main thread, and then later moved to the datasync
instance thread. The initialize() function is the first to be called after changing the thread.
You should do nothing in the constructor, and all the initialization inside of that function,
to ensure a fast and smooth usage.

@sa Setup::setLocalStore, Setup::localStore
*/

/*!
@fn QtDataSync::LocalStore::count

@param id The id of this operation. Must be passed on to the signal
@param typeName The name of the type to load the number for

The result of this operation must be reported by calling requestCompleted() with the given id
and the result as second parameter. The result must be an integer, passed via the json value.

If your operation fails, emit requestFailed() with the given id and an error message.

@sa LocalStore::requestCompleted, LocalStore::requestFailed
*/

/*!
@fn QtDataSync::LocalStore::keys

@param id The id of this operation. Must be passed on to the signal
@param typeName The name of the type to load the keys for

The result of this operation must be reported by calling requestCompleted() with the given id
and the result as second parameter. The result must be an array of strings, passed via the json
value. Use QJsonArray::fromStringList to generate a json array from a string list.

If your operation fails, emit requestFailed() with the given id and an error message.

@sa LocalStore::requestCompleted, LocalStore::requestFailed
*/

/*!
@fn QtDataSync::LocalStore::loadAll

@param id The id of this operation. Must be passed on to the signal
@param typeName The name of the type to load the keys for

The result of this operation must be reported by calling requestCompleted() with the given id
and the result as second parameter. The result must be an array of json objects, passed via
the json value.

If your operation fails, emit requestFailed() with the given id and an error message.

@sa LocalStore::requestCompleted, LocalStore::requestFailed
*/

/*!
@fn QtDataSync::LocalStore::load

@param id The id of this operation. Must be passed on to the signal
@param key The object key (type and key) of the object to be loaded
@param keyProperty The property of the object that is the key property (the USER-property)

The key property can be used if your store does not save "key-value" pairs, but instead only
the object. Since the object already contains the key (as the keyProperty property), you
can simply check the value of that property as the key. You do not have to use this property,
but you can.

The result of this operation must be reported by calling requestCompleted() with the given id
and the result as second parameter. The result must be a json object, passed via the json
value.

If your operation fails, emit requestFailed() with the given id and an error message.

@sa LocalStore::requestCompleted, LocalStore::requestFailed
*/

/*!
@fn QtDataSync::LocalStore::save

@param id The id of this operation. Must be passed on to the signal
@param key The object key (type and key) of the object to be saved
@param object The json object to be stored
@param keyProperty The property of the object that is the key property (the USER-property)

The key property can be used if your store does not save "key-value" pairs, but instead only
the object. Since the object already contains the key (as the keyProperty property), you
can simply save the object only, and use the key property for indexing etc.

The result of this operation must be reported by calling requestCompleted() with the given id
and the result as second parameter. The result is ignored, you can set it to
QJsonValue::Undefined.

If your operation fails, emit requestFailed() with the given id and an error message.

@sa LocalStore::requestCompleted, LocalStore::requestFailed
*/

/*!
@fn QtDataSync::LocalStore::remove

@param id The id of this operation. Must be passed on to the signal
@param key The object key (type and key) of the object to be saved
@param keyProperty The property of the object that is the key property (the USER-property)

The key property can be used if your store does not save "key-value" pairs, but instead only
the object. Since the object already contains the key (as the keyProperty property), you
can simply check the value of that property as the key. You do not have to use this property,
but you can.

The result of this operation must be reported by calling requestCompleted() with the given id
and the result as second parameter. The result must be a bool, passed via the json value. It
should return `true`, if something was indeed deleted, and `false` if no dataset with for that
type and key exists.

If your operation fails, emit requestFailed() with the given id and an error message.

@sa LocalStore::requestCompleted, LocalStore::requestFailed
*/

/*!
@fn QtDataSync::LocalStore::search

@param id The id of this operation. Must be passed on to the signal
@param typeName The name of the type to load the keys for
@param searchQuery The search string to use as query

You can implement search however you want, since the search query is simply passed on from
the AsyncDataStore to this method. The default implementation of the sql store uses wildcard
syntax for the search.

The result of this operation must be reported by calling requestCompleted() with the given id
and the result as second parameter. The result must be an array of json objects, passed via
the json value.

If your operation fails, emit requestFailed() with the given id and an error message.

@sa LocalStore::requestCompleted, LocalStore::requestFailed, AsyncDataStore::search
*/
