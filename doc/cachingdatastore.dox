/*!
@class QtDataSync::CachingDataStore

The caching store is an alternative to the AsyncDataStore. Instead of make async requests for
any operation, the caching store loads all datasets for one type once. This allows you to
access the data synchronously, without blocking. Subsequent changes you make on the chached
store are internally run asynchronously to pass the on to the main store. Changes in the
datasyncs local storage are automatically detected and applied to the stores dataset.

<b>Important:</b> Creating a caching store will automatically trigger loading. Thus, all coditions
of the AsyncDataStore apply here as well. You have to wait until the data has been loaded. Once
storeLoaded() has been emitted, you can use the caching store.

@note While this approach is much more efficient if you "work" on the data, and makes it easier
to access data, you always have to keep in mind that a save operation may be done in an instant
on the caching store, but will take a while until it's actually passed on to the local storage.

@sa AsyncDataStore
*/

/*!
@fn QtDataSync::CachingDataStore::CachingDataStore(QObject *, bool)

@param parent The parent object
@param blockingConstruct Specify, whether the constructor should be blocking or not

By default, the store cannot be used after construction. You have to wait until storeLoaded has
been emitted. In case you can't use the signal, you can set blockingConstruct to `true`. This
will make the constructor blocking, and it waits for the store to be loaded. If you do a blocking
construct, the store can be used immediatly after construction.
*/
