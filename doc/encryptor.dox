/*!
@class QtDataSync::Encryptor

It is used by the datasync engine to encrypt user data before it is sent to the server, and
decrypt the data loaded from the server. It provides an abstract interface to perform encryption
with whatever algorithm you want to use. The default implementation uses [QTinyAes](https://github.com/Skycoder42/QTinyAes),
a Qt wrapper around [tiny-AES128-C](https://github.com/kokke/tiny-AES128-C).

If you implement the methods, you must do it synchronously. Since the datasync instance
engine, as well as this holder, run on their own thread, you won't block the ui.

@attention The encryptor is constructed on the main thread, and then later moved to the datasync
instance thread. The initialize() function is the first to be called after changing the thread.
You should do nothing in the constructor, and all the initialization inside of that function,
to ensure a fast and smooth usage.

@sa Setup::setEncryptor, Setup::encryptor, RemoteConnector::cryptor
*/

/*!
@fn QtDataSync::Encryptor::encrypt

@param key The object key (type and key) of the object to be encrypted
@param object The object to be encrypted
@param keyProperty The property of the object that is the key property (the USER-property)
@returns The encrypted data, wrapped inside a json value
@throws QException If encryption failed

@sa Encryptor::decrypt, RemoteConnector::upload
*/

/*!
@fn QtDataSync::Encryptor::decrypt

@param key The object key (type and key) of the object to be decrypted
@param data The encrypted data, wrapped inside a json value
@param keyProperty The property of the object that is the key property (the USER-property)
@returns The decrypted json object
@throws QException If decryption failed

@sa Encryptor::encrypt, RemoteConnector::download
*/
