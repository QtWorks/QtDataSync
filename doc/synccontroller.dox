/*!
@class QtDataSync::SyncController

With this controller, you can report the sychronization state to the user, and you can trigger
specific actions.
*/

/*!
@property QtDataSync::SyncController::syncState

@default{SyncController::Loading}

The sync state is forwareded from the engine to all controllers. It describes the state of
synchronization between the instances local store and the remote.

@accessors{
	@readAc{syncState()}
	@notifyAc{syncStateChanged()}
}

@sa SyncController::syncOperationsChanged, SyncController::triggerSync
*/

/*!
@property QtDataSync::SyncController::authenticationError

@default{<i>empty</i> (default constructed)}

If this property is empty, it means there is no error. If authentication failed inside the
remote connector, this property will contain the error string (and SyncController::syncState
will be SyncController::Disconnected)

@accessors{
	@readAc{authenticationError()}
	@notifyAc{authenticationErrorChanged()}
}

@sa SyncController::syncState, RemoteConnector::authenticationFailed
*/

/*!
@fn QtDataSync::SyncController::triggerSync

Triggering sync means that the instance will simply reload the remotes state and compare it
with the local state. Typically, this happens automatically on creation of the instance and
is repeated while running. However, in some cases you may want to explicitly trigger a
synchronization.

@sa QtDataSync::SyncController::triggerSyncWithResult, QtDataSync::SyncController::triggerResync
*/

/*!
@fn QtDataSync::SyncController::triggerSyncWithResult

@param resultFn A handler to be called when finished

Triggers synchronization and sets a handler. This handler is called once, as soon as the
datasync instance reaches a stable state (Disconnected, Synced or SyncedWithErrors). This can
be used if you need to do something special after sync was finished.

@copydetails QtDataSync::SyncController::triggerSync
*/

/*!
@fn QtDataSync::SyncController::triggerResync

Triggering resync means both the local and the remote *change state* (not the data!) are
discarded and then set to changed for all existing entries, followed by a synchronization. A
resync can be used to recover errors in remote or local state. After a resync you can be shure
both sides have the same data.

@attention Triggering a resync may or may not work. All it does is request a resync at the
remote. Only if the remote accepts, resync will actually work. If the remote does not allow it,
a normal sync will be performed

@sa QtDataSync::SyncController::triggerResyncWithResult, QtDataSync::SyncController::triggerSync
*/

/*!
@fn QtDataSync::SyncController::triggerResyncWithResult

@param resultFn A handler to be called when finished

Triggers resynchronization and sets a handler. This handler is called once, as soon as the
datasync instance reaches a stable state (Disconnected, Synced or SyncedWithErrors). This can
be used if you need to do something special after resync was finished.

@copydetails QtDataSync::SyncController::triggerResync
*/

