/*!
@class QtDataSync::Defaults

This class is internally used to easily get "defaults" that vary between different setups.
Unless you are extending data sync with a custom implementation, this class has no relevance
for you.

Using this defaults provides save storage locations, settings, logging and more, that won't
interfere with other instances of data sync. If you need to store files, settings or do some
logging, you should use this defaults to do so.

@sa Setup
*/

/*!
@fn QtDataSync::Defaults::createLogger

@param subCategory The sub category, passed to the logger constructor
@param parent The object parent of the created logger
@returns A new created instance of a logger

Uses the setup this defaults belong to and the passed category to create a logger.
Read the Logger documentation for more details.

@sa Logger
*/

/*!
@fn QtDataSync::Defaults::storageDir

@returns The local storage directory

When implementing a part of qtdatasync, you may need to store data on the local file system.
You should **always** store data inside this folder. Consider it your "root folder". Storing
in different locations can lead to undefined behaviour. Of cause you can create subdirs etc
inside this folder as you please. However, there are some special files, like the lock file or
the settings you should not modify yourself.

@sa Defaults::settings, Setup::setLocalDir
*/

/*!
@fn QtDataSync::Defaults::settings

@returns The settings instance

See Defaults::createSettings. This overload simply returns a settings instance owned by the
defaults, instead of creating one. This can be useful for small access.

@attention This instance is shared across all components of the instance. This means, if you
use groups or arrays, you have to close them before leaving scope

@sa Defaults::storageDir, Defaults::createSettings
*/

/*!
@fn QtDataSync::Defaults::createSettings

@param parent The parent object for the settings
@returns A newly created settings instance

Creates a QSettings instance that will persist data for this setup. The settings reside inside
of the settings storage directory, and thus are not bound to the setup name. If you want to
store data persistently, like usernames etc, use this settings.

@sa Defaults::storageDir, Defaults::settings
*/

/*!
@fn QtDataSync::Defaults::serializer

@returns The json serializer

The serializer is the one used by datasync internally. If you need to de/serializer data
in your custom implementations, make shure to use this one.

@attention This instance is shared across the whole setup, do not delete or change it, use
it only to de/serializer data.

@sa Setup::serializer, QJsonSerializer
*/

/*!
@fn QtDataSync::Defaults::aquireDatabase

@returns An instance of the local sqlite database

If you are working with sqlite databases, you can use this function to get a reference to one.
This allows multiple components to share one database, instead of create many. Of cause, this
means will will have to be careful to not interfere with the data of other components. The
database itself will be created inside the storage directory.

@warning If you aquire an instance with this function, you have to release it later using
releaseDatabase(). If not, the database will not be closed when you the datasync instance
finishes. This leads to a dangling connection!

@sa Defaults::releaseDatabase, Defaults::storageDir
*/

/*!
@fn QtDataSync::Defaults::releaseDatabase

Release a database you previously aquired using aquireDatabase(). Please note that this method
simply tells the defaults you are not using it anymore, and closes the connection once nobody
is. You must drop all references in your implementation before calling this method.

@sa Defaults::aquireDatabase
*/
