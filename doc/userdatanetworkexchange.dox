/*!
@class QtDataSync::UserInfo

This class is used by the UserDataNetworkExchange class to provide information about discovered
users. The name can be choose by the remote that sent the user information, address and port are
detected from the message.

@sa UserDataNetworkExchange, UserDataNetworkExchange::users
*/

/*!
@property QtDataSync::UserInfo::name

@default{`"<Unnamed>"` (Translated)}

The name can be choosen by whoever sent the message. It is
typically used to identify a device from a users view.

@accessors{
	@readAc{name()}
	@constantAc
}

@sa UserDataNetworkExchange::deviceName
*/

/*!
@property QtDataSync::UserInfo::address

@default{<i>Unknown</i>}

The address from where the message came. Is also used
as target address to send a message back.

@accessors{
	@readAc{address()}
	@constantAc
}

@sa UserInfo::port
*/

/*!
@property QtDataSync::UserInfo::port

@default{<i>Unknown</i>}

The port from where the message came. Is also used
as target port to send a message back.

@accessors{
	@readAc{port()}
	@constantAc
}

@sa UserInfo::address
*/



/*!
@class QtDataSync::UserDataNetworkExchange

This class can be used to exchange the user identity af a setup via the local network.
It provides an easy way to transfer the identity between devices, without any need
of external servers or other transfer devices.

In addition, the identities can be encrypted for transport via a one time password

@note The class makes use of UDP-Broadcasts to discover other devices on the local network.
This only works if both devices have an active UserDataNetworkExchange running and if
the network they both are connected to supports broadcasts. It does <b>not</b> work
across networks.

@sa Authenticator
*/

/*!
@property QtDataSync::UserDataNetworkExchange::deviceName

@default{`QSysInfo::machineHostName()`}

The deviceName is the name that is send to other devices when active. It
can be used to identify this device.

@attention The name is not guaranteed to be unique. It can be used by users
to logically identify a device, but does not serve as real identifier.

@accessors{
	@readAc{deviceName()}
	@writeAc{setDeviceName()}
	@resetAc{resetDeviceName()}
	@notifyAc{deviceNameChanged()}
}
*/

/*!
@property QtDataSync::UserDataNetworkExchange::active

@default{`false`}

The UserDataNetworkExchange is considered active when actively
searching for other devices, ready to export or import data from
and to other devices.

When inactive, the device is disconnected from the network and does
not send or receive any data.

@accessors{
	@readAc{isActive()}
	@notifyAc{activeChanged()}
}

@sa UserDataNetworkExchange::startExchange, UserDataNetworkExchange::stopExchange
*/

/*!
@property QtDataSync::UserDataNetworkExchange::users

@default{<i>Empty</i>}

This list contains all users discovered on the local network (excluding yourself).
It only can find devices that have the exchange active on the same port.

The list will only contain any users if active

@accessors{
	@readAc{users()}
	@notifyAc{usersChanged()}
}

@sa UserInfo, UserDataNetworkExchange::active, UserDataNetworkExchange::exportTo, UserDataNetworkExchange::importFrom
*/

/*!
@fn QtDataSync::UserDataNetworkExchange::port

@returns The currently used port, if active

The returned port is only valid whne activly exchanging.
Can be used to retrieve the choosen port when working with random ports

@sa UserDataNetworkExchange::active, UserDataNetworkExchange::startExchange
*/

/*!
@fn QtDataSync::UserDataNetworkExchange::startExchange(quint16)

@param port The port to start the exchange on
@returns true, if successfully started, false if not

The exchange is run for all addresses, allowing connections from anywhere and
broadcasting to anyone in the local network.

If the function fails, you can use the socketError() method to get a descriptive error string.

@sa UserDataNetworkExchange::active, UserDataNetworkExchange::socketError, UserDataNetworkExchange::stopExchange
*/

/*!
@fn QtDataSync::UserDataNetworkExchange::startExchange(const QHostAddress &, quint16, bool)

@param listenAddress The address to listen on for incoming messages
@param port The port to start the exchange on
@param allowReuseAddress Specify, if multiple instances can use the same port
@returns true, if successfully started, false if not

The exchange is run for the given addresses, allowing connections only from addresses matching
the given address and broadcasting to anyone in the local network. The allowReuseAddress
can be used to allow multiple instances on the same port (disallowed by default). Use with caution,
as is can lead to unwanted listeners.

If the function fails, you can use the socketError() method to get a descriptive error string.

@sa UserDataNetworkExchange::active, UserDataNetworkExchange::socketError, UserDataNetworkExchange::stopExchange
*/

/*!
@fn QtDataSync::UserDataNetworkExchange::stopExchange

Stops sending and receiving messages, clears all users and pending imports. After stopping,
this device disappears from the network and can neither be discovered by other exchanges, not
discover them.

@sa UserDataNetworkExchange::active, UserDataNetworkExchange::startExchange
*/

/*!
@fn QtDataSync::UserDataNetworkExchange::exportTo

@param userInfo The user to send the identity to
@param password A password to encrypt the data before sending

The identity of the current user for the setup used on this instance is exported
and sent to the address represented by the passed userInfo. The userInfo should be
a user discovered by the exchange from UserDataNetworkExchange::users

The password is an optional parameter. If left empty, the data is sent unencrypted.
If it contains a string, the string is used to derive a key and encrypt the identity
data using CBC-AES-256 before sending it to the target.

@warning You should always use passwords to encrypt identity data, as it is sensitive data!

@sa UserDataNetworkExchange::userDataReceived, UserDataNetworkExchange::importFrom
*/

/*!
@fn QtDataSync::UserDataNetworkExchange::importFrom

@param userInfo The user to that sent the data to import
@param password A password to decrypt the received data
@returns A task to wait on for the completition of the import

Use this method to perform the actual import of an identity after receiving it
via userDataReceived(). If the data is encrypted, the correct password must be
passed as second parameter to decrypt the data before importing it. If the
data was not encrypted, pass a null string.

@sa UserDataNetworkExchange::userDataReceived, UserDataNetworkExchange::exportTo
*/

/*!
@fn QtDataSync::UserDataNetworkExchange::userDataReceived

@param userInfo The user that sent his identity to this device
@param secured `true` if the received data is encrypted with a password

When a user exports his identity to this device via exportTo(), this signal
is emitted. Connect to it to react an proposed identity data. The data is
<b>not</b> imported immediatly. You can use the importFrom() method to perform
the actual import of the data, if you want to accept it. if the data is secured,
a password is needed to decrypt it.

@sa UserDataNetworkExchange::importFrom, UserDataNetworkExchange::exportTo
*/
