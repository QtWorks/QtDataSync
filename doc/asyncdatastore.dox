/*!
@class QtDataSync::AsyncDataStore

Async data access allows you to directly load data from the store or save it there. However,
all operations on it are, as the name suggests, asynchronous. Check the CachingDataStore, if
you want to work with a synchronous data source instead.

For the store to work it needs a valid datasync instance to be running. This means
Setup::create **must** be called before a async store is constructed for this setup!

<b>Exceptions:</b> All methods that return generic task or task objects are run async. However,
if those methods fail, exception are thrown and stored together with the Task. When using the
task synchronously, i.e. by calling Task::result, those exceptions are rethrown and must be
caught. For result handlers, you can opionally react on them. Typically, none of those functions
should fail. However, errors in the local store can trigger them. If you want to be on the safe
side, you should use try-catch blocks when waiting for the futures to prevent crashes.

@note If you want to use the AsyncDataStore::search functions, the query parameter depends on
the kind of local store you are using. If you are using the default SQLite based one, this
method accepts wildcard search queries, e.g. *new* to find all entries that contain the string
"new"

@warning If you are using the async stores generic methods, and you are working with QObject
classes, please be aware that the store **never** takes ownership of those objects, neither for
saving nor for loading. You as the caller of those methods are responsible for deleting the
objects after the operations have been completed.

@sa CachingDataStore
*/

/*!
@fn QtDataSync::AsyncDataStore::iterate(const std::function<bool(T)> &, const std::function<void(const QException &)> &)

@param iterator The iterator to be called for each dataset loaded
@param onExcept A handler to be called if reading fails at some point

Inernally, the store will load one dataset after another, and call iterator with the result.
You can return `true` to continue iterating, or `false` to cancel prematurely. The exception
handler is passed to to the Tasks internally used.

@sa Task
*/

/*!
@fn QtDataSync::AsyncDataStore::iterate(int, const std::function<bool(QVariant)> &, const std::function<void(const QException &)> &)

@param metaTypeId The type of datasets to iterate over
@copydetails AsyncDataStore::iterate(const std::function<bool(T)> &, const std::function<void(const QException &)> &)
*/

/*!
@fn QtDataSync::AsyncDataStore::dataChanged

@param metaTypeId The QMetaTypeId of the type of the change dataset
@param key The key of the changed dataset
@param wasDeleted `false` if changed, `true` if deleted

You can use this signal to detect changes on datasets. Use qMetaTypeId() to compare with the
given metaTypeId to detect the type that has changed, and react accordingly
*/
