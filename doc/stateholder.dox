/*!
@class QtDataSync::StateHolder

It is used by the datasync engine as a persistent store for the local change state, i.e. all
changes that have beend made to the locally saved data. You should make shure
your implementation only uses offline resources, that are available any time. The default
implementation uses a SQLite database and local file storage.

If you implement the methods, you must do it synchronously. Since the datasync instance
engine, as well as this holder, run on their own thread, you won't block the ui. Please note
that the state holders operations cannot report failures. Try to implement the class in a
failsafe manner, and if errors occure, log them, but return "sane" results where required.

@attention The state holder is constructed on the main thread, and then later moved to the datasync
instance thread. The initialize() function is the first to be called after changing the thread.
You should do nothing in the constructor, and all the initialization inside of that function,
to ensure a fast and smooth usage.

@sa Setup::setStateHolder, Setup::stateHolder
*/

/*!
@fn QtDataSync::StateHolder::resetAllChanges

@param changeKeys The list with the new changed keys
@returns The holders state after resetting the changes

Internally, this function should discard all changes, and the add all the given keys with the
StateHolder::Changed state. The returned hash is the state after those operations.

@note If something fails along the way, try to return whatever the current state is, instead
of returning an empty one, if possible.
*/
