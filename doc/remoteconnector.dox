/*!
@class QtDataSync::RemoteConnector

The remote connector is the part of datasync that communicates with a remote server to
exchange data between local and remote, as well as loading the remotes state and receiving
updates on state changes.

If you want to use a custom server implementation, all you need to do is implement this
interface. Please read this documentation carefully, in order implement it correctly! If you
are unsure about methods, you can check the WsRemoteConnector implementation on github. It's
the default implementation that connects to a qdatasyncserver via websockets.

@attention The remote connector is constructed on the main thread, and then later moved to the datasync
instance thread. The initialize() function is the first to be called after changing the thread.
You should do nothing in the constructor, and all the initialization inside of that function,
to ensure a fast and smooth usage.

@sa Setup::setRemoteConnector, Setup::remoteConnector, Authenticator
*/

/*!
@fn QtDataSync::RemoteConnector::createAuthenticator

@param defaults The defaults of the datasync instance the authenticator belongs to
@param parent A parent object for the authenticator
@returns An instance of an Authenticator for your implementation

Every custom RemoteConnector needs an Authenticator to make it possible to set stuff like a
remote URL and user credentials. Create one for your implementation. This method is called to
create Authenticator objects.

@warning This method can be called from **any** thread, and it will always be a different one
then the one the RemoteConnector lives on. Your implementation must be threadsafe. The
authenticator must be constructed independently of the datasync thread. Please make shure your
authenticator implementation communicates with your connector in a threadsafe manner as well.

@sa Authenticator, WsAuthenticator
*/

/*!
@fn QtDataSync::RemoteConnector::reloadRemoteState

Typically, you should receive changes from your remote implicitly when connected, or periodically
check for changes. However, a user may decide to "sync know". For this and other internal use
cases, this method is called. You should simply check your remote for changes of their state.

@note This method is *not* called after initializing the connector. If your connector can
connect to a remote after starting, you should automatically check for changes from the
initialize() method.

Use remoteStateChanged() to update the connectors state while checking for changes.

@sa RemoteConnector::remoteStateChanged, RemoteConnector::requestResync,
RemoteConnector::remoteDataChanged, SyncController::triggerSync
*/

/*!
@fn QtDataSync::RemoteConnector::requestResync

Users can perform a "resync". This means the local and the remote change state should be
discarded, and all datasets assumed as changed. This will cause the next synchronisation to
completly resync all data, and makes shure client and server have the same state. This can
be used if somehow the local or remote state got currupted.

Typically, remotes can start a resync as well. This method should inform the remote to start a
resync. If the remote accepts, the next sync is a resync, so you should simply perform a
sychronisation after this to perform the resync.

@attention For a resync to work you must emit `performLocalReset(false)` at some point.
However, if possible, don't do it here. Instead, when synchronizing after telling the server to
resync, and the server tell you the client to resync, emit it there.

@sa RemoteConnector::reloadRemoteState, RemoteConnector::performLocalReset,
SyncController::triggerResync
*/

/*!
@fn QtDataSync::RemoteConnector::download

@param key The object key (type and key) of the object to be downloaded
@param keyProperty The property of the object that is the key property (the USER-property)

The key property can be used if your server does not save "key-value" pairs, but instead only
the object. Since the object already contains the key (as the keyProperty property), you
can simply check the value of that property as the key. You do not have to use this property,
but you can. One example would be a document store.

The result of this operation must be reported by calling operationDone(). The result
parameter must be the downloaded json object, passed via the json value.

If your operation fails, emit operationFailed() with an error message.

@sa RemoteConnector::operationDone, RemoteConnector::operationFailed
*/

/*!
@fn QtDataSync::RemoteConnector::upload

@param key The object key (type and key) of the object to be uploaded
@param object The json object to be stored
@param keyProperty The property of the object that is the key property (the USER-property)

The key property can be used if your store does not save "key-value" pairs, but instead only
the object. Since the object already contains the key (as the keyProperty property), you
can simply save the object only, and use the key property for indexing etc. One example would
be a document store.

The result of this operation must be reported by calling operationDone(). The result
parameter is ignored, you can set it to QJsonValue::Undefined.

If your operation fails, emit operationFailed() with an error message.

@note Performing an upload operation must implicitly mark this dataset as unchanged for this
client. The server should implicitly do the same as for a markUnchanged() operation after
uploading.

@sa RemoteConnector::operationDone, RemoteConnector::operationFailed,
RemoteConnector::markUnchanged
*/

/*!
@fn QtDataSync::RemoteConnector::remove

@param key The object key (type and key) of the object to be removed
@param keyProperty The property of the object that is the key property (the USER-property)

The key property can be used if your server does not save "key-value" pairs, but instead only
the object. Since the object already contains the key (as the keyProperty property), you
can simply check the value of that property as the key. You do not have to use this property,
but you can. One example would be a document store.

The result of this operation must be reported by calling operationDone(). The result
parameter is ignored, you can set it to QJsonValue::Undefined.

If your operation fails, emit operationFailed() with an error message.

@note Performing an upload operation must implicitly mark this dataset as unchanged for this
client. The server should implicitly do the same as for a markUnchanged() operation after
removing.

@sa RemoteConnector::operationDone, RemoteConnector::operationFailed,
RemoteConnector::markUnchanged
*/

/*!
@fn QtDataSync::RemoteConnector::markUnchanged

@param key The object key (type and key) of the object to be marked as unchanged
@param keyProperty The property of the object that is the key property (the USER-property)

The remote server always has a changed state. If one clients mofifies the server state by
uploading or removing, the server will mark that dataset as changed for all other existing
clients. When a client updated its state from the server, it needs to tell the server not
assume this dataset as unchanged. And thats what this method should tell the server to do.

The key property can be used if your server does not save "key-value" pairs, but instead only
the object. Since the object already contains the key (as the keyProperty property), you
can simply check the value of that property as the key. You do not have to use this property,
but you can. One example would be a document store.

The result of this operation must be reported by calling operationDone(). The result
parameter is ignored, you can set it to QJsonValue::Undefined.

If your operation fails, emit operationFailed() with an error message.

@sa RemoteConnector::operationDone, RemoteConnector::operationFailed
*/

/*!
@fn QtDataSync::RemoteConnector::remoteStateChanged

@param state The current state of the connector
@param remoteChanges The current change state of the remote

Use this signal to notify datasync whenever the connectors state changes. If the remote gets
disconnected, if your reloading the remote state or when you finished loading the state - use
this to tell. If errors occure, log the using the defaults logger, and simply change the state
to disconnected. Check RemoteConnector::RemoteState for the possible states

The second parameter is only used if the state is RemoteConnector::RemoteReady. The remote is
considered "ready", if you have loaded the current state. Changing to this state will initiate
the synchronization process. As such, the second parameter should hold the state that was
successfully loaded. Subsequent changes to the state should be reported using
remoteDataChanged().

@sa RemoteConnector::RemoteState, RemoteConnector::operationDone,
RemoteConnector::reloadRemoteState
*/

/*!
@fn QtDataSync::RemoteConnector::remoteDataChanged

@param key The object key (type and key) of the object that has changed
@param state The new change state of the given dataset

Use this signal to notify datasync whenever the servers state for a dataset changes, while the
server is still "connected". While remoteStateChanged() always *resets* the server state, this
method updates the already known state by the given pair. This means you load the state once,
and than update changes incremental.

@sa RemoteConnector::remoteStateChanged
*/

/*!
@fn QtDataSync::RemoteConnector::authenticationFailed

@param reason An error string with the reason why auth failed.

Use this signal to notify the SyncController that synchronizing does not work because of an
authentication error. As soon as it gets resolved, emit clearAuthenticationError() to clear
the error.

@warning This signal should be emitted **additionally** to remoteStateChanged() etc. It's
simply additional information to be passed directly to the sync controller, and has no effect
on the synchronization process. If you don't want to report errors, you could leave it out and
sync would still work as expected.

@sa RemoteConnector::remoteStateChanged, RemoteConnector::clearAuthenticationError,
SyncController::authenticationError
*/

/*!
@fn QtDataSync::RemoteConnector::clearAuthenticationError

See authenticationFailed()

@sa RemoteConnector::authenticationFailed
*/
