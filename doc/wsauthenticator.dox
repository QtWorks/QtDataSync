/*!
@class QtDataSync::WsAuthenticator

If you are using the default remote connector, that connects to a qdatasync server via
websockets, this is the class you get from Setup::authenticatorForSetup. You can use it to
configure the connection to your qdatasync server.

@sa Setup::authenticatorForSetup
*/

/*!
@property QtDataSync::WsAuthenticator::remoteUrl

@default{<i>invalid</i> (default constructed)}

The URL must be a valid websocket URL, i.e. `"ws://..." or "wss://..."`. It is used to find
the server. You can set url, credentials, query parameters etc. via the url.

@note Simply changing this property will **not** update the internal connection immediatly. If
you want the current instance to use the updated url, you must call reconnect() to tell the
connector to reconnect to a remote with updated data.

@accessors{
	@readAc{remoteUrl()}
	@writeAc{setRemoteUrl()}
}

@sa WsAuthenticator::reconnect, WsAuthenticator::customHeaders
*/

/*!
@property QtDataSync::WsAuthenticator::customHeaders

@default{<i>empty</i> (default constructed)}

If you need any additional HTTP-headers for the initial request that is sent, you can set them
via this property. For most cases, you don't need them, since all headers related to the
upgrade to a websocket connection will be set automatically.

@note Simply changing this property will **not** update the internal connection immediatly. If
you want the current instance to use the updated url, you must call reconnect() to tell the
connector to reconnect to a remote with updated data.

@accessors{
	@readAc{customHeaders()}
	@writeAc{setCustomHeaders()}
}

@sa WsAuthenticator::reconnect, WsAuthenticator::remoteUrl
*/

/*!
@property QtDataSync::WsAuthenticator::validateServerCertificate

@default{Depends on `QSslConfiguration::defaultConfiguration().peerVerifyMode()`}

Typically, server certificates need to be valid and trusted in order to work. If you use a self
signed certificate for your remote, in order to use a WSS connection, you can disable the
verification of server certificates for the datasync instance with this property.

@note Simply changing this property will **not** update the internal connection immediatly. If
you want the current instance to use the updated url, you must call reconnect() to tell the
connector to reconnect to a remote with updated data.

@accessors{
	@readAc{validateServerCertificate()}
	@writeAc{setValidateServerCertificate()}
}

@sa WsAuthenticator::reconnect
*/

/*!
@property QtDataSync::WsAuthenticator::userIdentity

@default{<i>invalid</i> (default constructed)}

The user identity is what identifies you on the remote server. This identity is used to find
out who this device is. If you are using qdatasyncserver, a new identity will be created
automatically the first time you connect. However, you will have to pass this id to the user,
so the user can exchange it between his devices in order to use the same "account" on all
devices. This id serves as username and password in one.

Changing the user identity via this property will delete all data inside of the store. This way
no old data will be passed on to another account when changing. However, if you want to keep
all local data, and simply synchronize it with whatever the remote state of the new account is,
you can set the clearLocalStore parameter of the write and reset accessor to false. Resetting
the identity will clear it locally and automatically create a new one the next time the server
is connected (if using qdatasyncserver).

@note Simply changing this property will **not** update the internal connection immediatly. If
you want the current instance to use the updated url, you must call reconnect() to tell the
connector to reconnect to a remote with updated data.

@accessors{
	@readAc{userIdentity()}
	@writeAc{setUserIdentity()}
	@resetAc{resetUserIdentity()}
}

@sa WsAuthenticator::reconnect
*/

/*!
@property QtDataSync::WsAuthenticator::serverSecret

@default{<i>empty</i> (default constructed)}

If you are using qdatasync, you can optionally set a server secret, to make shure only valid
clients can connect. This is the property you need to set on the client.

@warning Internally, the origin header is used to pass the secret. This is unsecure if not
using an encrypted connection, i.e. WSS.

@note Simply changing this property will **not** update the internal connection immediatly. If
you want the current instance to use the updated url, you must call reconnect() to tell the
connector to reconnect to a remote with updated data.

@accessors{
	@readAc{serverSecret()}
	@writeAc{setServerSecret()}
}

@sa WsAuthenticator::reconnect
*/

/*!
@property QtDataSync::WsAuthenticator::connected

@default{`false`}

This property mirrors the connector. If a remote server is connected, it's `true`, if not it
will be `false`. Certain operations may disconnect the remote for short times, such as
reconnect() or SyncController::triggerResync().

@accessors{
	@readAc{isConnected()}
	@notifyAc{connectedChanged()}
}

@sa WsAuthenticator::reconnect
*/
