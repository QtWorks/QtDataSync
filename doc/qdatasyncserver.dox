/*!
@page qdatasyncserver qdatasyncserver Documentation

@brief The documentation for the server application coming with datasync

This page describes how to use qdatasync server. You can follow this document to find out
what you can configure etc.

@tableofcontents

# Requirements and installation {#qdatasyncserver_install}
## PostgreSQL {#qdatasyncserver_install_postgre}
All qdatasyncserver needs as additional setup is a connection to a postgresql database. Simply
install PostgreSQL on your server machine, and create a database (and a user) for qdatasync.
If you want to use docker, you can use the [docker image](https://hub.docker.com/_/postgres/) of PostgreSQL.
There is no additional setup needed. Since table creation etc is done by the server itself.

## qdatasyncserver {#qdatasyncserver_install_qdatasyncserver}
For the server, all you need is a standard deployment, e.g. the Qt libraries. The application itself
can be copied from the bin folder of your installation. If you use the libraries from there as well,
it will work fine. Have a look at the deployment pages for details:
- [Linux](https://doc.qt.io/qt-5/linux-deployment.html)
- [Windows](https://doc.qt.io/qt-5/windows-deployment.html)
- [MacOs](https://doc.qt.io/qt-5/osx-deployment.html)

### Docker Image {#qdatasyncserver_install_docker}
qdatasyncserver is available as docker image as well. This way you can skip all the setup stuff! Have
a look at [TODO link here](error404) on dockerhub!

# Command line usage {#qdatasyncserver_cli}
The CLI is rather simple, you call `qdatasyncserver start` to start the server
and `qdatasyncserver stop` to stop it. Both commands will start the server
in background (as a daemon) and then return. You can specify additional
arguments for the start. The most important one would be `qdatasyncserver start -c <path_to_config>`.
It allows you to specify a different config file then the default one. That one is
located at `/etc/qdatasyncserver/setup.conf` for unix like systems, and a local path
for others. Run `qdatasyncserver --help` for all available commands.

## Multiple instances {#qdatasyncserver_cli_instance}
qdatasyncserver is a single instance application. However, you may want to have multiple
instances running in parallel, to provide different endpoints for different applications.
You can, by using the `--id` parameter. By specifying the id, start will create a new
instance for that id, and other commands know which instance to use. Commands look
like `qdatasyncserver --id myId start` or  `qdatasyncserver --id myId stop`.

# The Configuration file {#qdatasyncserver_config}
The configuration file is all you need to properly setup the server. It's a rather
small config, in the `.ini` file format. An example for such a config file would be:
@code{.ini}
[general]
name=QtDataSync-TestServer

[server]
host=localhost
port=4242
secret=baum42

[database]
name=QtDataSync
host=localhost
port=15432
username=qtdatasync
password=baum42
@endcode

The default file location can be found by running `qdatasyncserver --help` and checking the
description of the `-c` option.

## Section general {#qdatasyncserver_config_general}
The general section contains stuff to globally configure the server.

Key		| Type		| Default value					| Describtion
--------|-----------|-------------------------------|-------------
name	| string	| "qdatasyncserver"				| The servers internal name. Use for logging etc.
threads	| integer	| QThread::idealThreadCount()	| The maximum of threads the server can use in it's threadpool

## Section database {#qdatasyncserver_config_db}
This section is used to set up the database connection.

Key			| Type		| Default value		| Describtion
------------|-----------|-------------------|-------------
driver		| string	| "QPSQL"			| The database driver to use. Leave out for PostgreSQL
name		| string	| [general]/name	| The name of the database to connect to
host		| string	| "localhost"		| The host to connect to
port		| integer	| 5432				| The port to connect to
username	| string	| ""				| The username to use
password	| string	| ""				| The password for that username
options		| string	| ""				| Additional database options. See QSqlDatabase::setConnectOptions

## Section network {#qdatasyncserver_config_network}
This section is used to set up the websocker server. This part is what
clients will connect to.

Key			| Type		| Default value		| Describtion
------------|-----------|-------------------|-------------
name		| string	| [general]/name	| The servers name, presented in the websocket handshake
host		| string	| "0.0.0.0"	(any)	| The host address to listen on. Can be used to limit access
port		| integer	| 0 (random)		| The port to bind to. If 0, a random port is choosen
secret		| string	| ""				| The server secret. All clients need to pass it if the want to connect. See WsAuthenticator::serverSecret
wss			| bool		| false				| Enable a secure (SSL) server. If you set it to true, the other wss/ fields need to be set as well
wss/pfx		| string	| ""				| A path to a PKCS#12 file, containing the certificate to use by the server, as well as the private key
wss/pass	| string	| ""				| The password for the PKCS#12 file

# Database cleanup {#qdatasyncserver_cleanup}
While the database is running, it will accumulate garbage, unused accounts and devices etc. You can use the cleanup
while it is running to remove all those. The cleanup is reported live to your console.

@warning Please be aware that this is a potentially destructive action and is not invertable. If you accidentially delete
user accounts etc, it may displease users. You should always be careful.

The cleanup can be invoked by calling `qdatasyncserver cleanup [targets]`. The targets are what you want to cleanup.
Those can be, in any order:
- **devices &lt;days&gt;:** Removes all devices that have not connected since `<days>` days. This will delete all those devices
as well as their change state. Please note that this action is not dangerous an it's own. If a device gets deleted that is
still in use, all that happens is that the user will have to resync, just as if he had connected for the first time with
the device
- **users:** Removes all users, **including their data**, that have no devices in the database. Please be careful with this
command, because it will actually delete a users data! Especially if combined with the devices target, this can cause great
data loss.
- **data:** Removes orphaned data nodes. This command is save as well, because it only removes data that is not used anymore.
Such data should not come to existance in the first place, but sometimes it happens.
- **resync:** Sets the resync flag for **all** devices. Use with care, because resync means all users need to completely
resync all data, and this means high data exchange. You can use this target if the servers synchronization state gets
corrupted (e.g. after a backup recovery) to make shure all clients get back to a valid sync state.

As an example, the following example would remove all devices and users, that have not connected for one year: `users devices 365 users`.
*/
